#!/usr/bin/env bash

projects_cache="$XDG_CACHE_HOME/dotfiles/projects.txt"
recent_projects_cache="$XDG_CACHE_HOME/dotfiles/recent_projects.txt"

if [ -f "$projects_cache" ]; then
  readarray -t project_dirs <"$projects_cache"
else
  # repo directories
  search_path=''
  if [ -d "$HOME/repos" ]; then
    search_path='--search-path '"$HOME/repos"
  fi
  if [ -d "$HOME/gitrepos" ]; then
    search_path=$search_path' --search-path '"$HOME/gitrepos"
  fi
  repo_proj_dirs=$(fd --color=never --exact-depth 1 --type directory --type symlink --glob $search_path --exec realpath "{}")

  if [ -f "${GOPATH}/src" ]; then
    # go directories
    go_proj_dirs=$(fd --color=never --min-depth 2 --max-depth 3 --search-path "${GOPATH}/src" --type directory --type symlink --exec realpath "{}")
  fi

  DOTFILES_PROJECT_DIRS=$(printf "%s\n%s" "${repo_proj_dirs}" "${go_proj_dirs}" | sort -uf | tee "$projects_cache")
  project_dirs=("${DOTFILES_PROJECT_DIRS}")
fi

mkdir -p "$XDG_CACHE_HOME/dotfiles"
touch "$recent_projects_cache"

readarray -t recent_projects <"$recent_projects_cache"
tput setaf 8
for recent_proj in "${recent_projects[@]}"; do
  printf "%s\n" "${recent_proj}"
  project_dirs_str=$(printf "%s\n" "${project_dirs[@]}")
  project_dirs=("${project_dirs_str/$recent_proj/}")
done
tput setaf 7
printf "%s/gitrepos\n" "${HOME}"
printf "%s/repos\n" "${HOME}"
printf "%s\n" "${project_dirs[@]}" | gsed -e /^$/d
